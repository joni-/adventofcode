// --- Day 10: The Stars Align ---
// It's no use; your navigation system simply isn't capable of providing walking directions in the arctic circle, and certainly not in 1018.

// The Elves suggest an alternative. In times like these, North Pole rescue operations will arrange points of light in the sky to guide missing Elves back to base. Unfortunately, the message is easy to miss: the points move slowly enough that it takes hours to align them, but have so much momentum that they only stay aligned for a second. If you blink at the wrong time, it might be hours before another message appears.

// You can see these points of light floating in the distance, and record their position in the sky and their velocity, the relative change in position per second (your puzzle input). The coordinates are all given from your perspective; given enough time, those positions and velocities will move the points into a cohesive message!

// Rather than wait, you decide to fast-forward the process and calculate what the points will eventually spell.

// For example, suppose you note the following points:

// position=< 9,  1> velocity=< 0,  2>
// position=< 7,  0> velocity=<-1,  0>
// position=< 3, -2> velocity=<-1,  1>
// position=< 6, 10> velocity=<-2, -1>
// position=< 2, -4> velocity=< 2,  2>
// position=<-6, 10> velocity=< 2, -2>
// position=< 1,  8> velocity=< 1, -1>
// position=< 1,  7> velocity=< 1,  0>
// position=<-3, 11> velocity=< 1, -2>
// position=< 7,  6> velocity=<-1, -1>
// position=<-2,  3> velocity=< 1,  0>
// position=<-4,  3> velocity=< 2,  0>
// position=<10, -3> velocity=<-1,  1>
// position=< 5, 11> velocity=< 1, -2>
// position=< 4,  7> velocity=< 0, -1>
// position=< 8, -2> velocity=< 0,  1>
// position=<15,  0> velocity=<-2,  0>
// position=< 1,  6> velocity=< 1,  0>
// position=< 8,  9> velocity=< 0, -1>
// position=< 3,  3> velocity=<-1,  1>
// position=< 0,  5> velocity=< 0, -1>
// position=<-2,  2> velocity=< 2,  0>
// position=< 5, -2> velocity=< 1,  2>
// position=< 1,  4> velocity=< 2,  1>
// position=<-2,  7> velocity=< 2, -2>
// position=< 3,  6> velocity=<-1, -1>
// position=< 5,  0> velocity=< 1,  0>
// position=<-6,  0> velocity=< 2,  0>
// position=< 5,  9> velocity=< 1, -2>
// position=<14,  7> velocity=<-2,  0>
// position=<-3,  6> velocity=< 2, -1>
// Each line represents one point. Positions are given as <X, Y> pairs: X represents how far left (negative) or right (positive) the point appears, while Y represents how far up (negative) or down (positive) the point appears.

// At 0 seconds, each point has the position given. Each second, each point's velocity is added to its position. So, a point with velocity <1, -2> is moving to the right, but is moving upward twice as quickly. If this point's initial position were <3, 9>, after 3 seconds, its position would become <6, 3>.

// Over time, the points listed above would move like this:

// Initially:
// ........#.............
// ................#.....
// .........#.#..#.......
// ......................
// #..........#.#.......#
// ...............#......
// ....#.................
// ..#.#....#............
// .......#..............
// ......#...............
// ...#...#.#...#........
// ....#..#..#.........#.
// .......#..............
// ...........#..#.......
// #...........#.........
// ...#.......#..........

// After 1 second:
// ......................
// ......................
// ..........#....#......
// ........#.....#.......
// ..#.........#......#..
// ......................
// ......#...............
// ....##.........#......
// ......#.#.............
// .....##.##..#.........
// ........#.#...........
// ........#...#.....#...
// ..#...........#.......
// ....#.....#.#.........
// ......................
// ......................

// After 2 seconds:
// ......................
// ......................
// ......................
// ..............#.......
// ....#..#...####..#....
// ......................
// ........#....#........
// ......#.#.............
// .......#...#..........
// .......#..#..#.#......
// ....#....#.#..........
// .....#...#...##.#.....
// ........#.............
// ......................
// ......................
// ......................

// After 3 seconds:
// ......................
// ......................
// ......................
// ......................
// ......#...#..###......
// ......#...#...#.......
// ......#...#...#.......
// ......#####...#.......
// ......#...#...#.......
// ......#...#...#.......
// ......#...#...#.......
// ......#...#..###......
// ......................
// ......................
// ......................
// ......................

// After 4 seconds:
// ......................
// ......................
// ......................
// ............#.........
// ........##...#.#......
// ......#.....#..#......
// .....#..##.##.#.......
// .......##.#....#......
// ...........#....#.....
// ..............#.......
// ....#......#...#......
// .....#.....##.........
// ...............#......
// ...............#......
// ......................
// ......................
// After 3 seconds, the message appeared briefly: HI. Of course, your message will be much longer and will take many more seconds to appear.

// What message will eventually appear in the sky?

// --- Part Two ---
// Good thing you didn't have to wait, because that would have taken a long time - much longer than the 3 seconds in the example above.

// Impressed by your sub-hour communication capabilities, the Elves are curious: exactly how many seconds would they have needed to wait for that message to appear?

namespace Solutions

open System
open System.Text.RegularExpressions
open System.Drawing

module Puzzle10 =
    type Coordinate = int * int
    type Velocity = int * int

    type Point(coordinate: Coordinate, velocity: Velocity) =
        member this.Coordinate = coordinate
        member this.Velocity = velocity

    let (|Regex|_|) pattern input =
        let m = Regex.Match(input, pattern)
        if m.Success then Some(List.tail [ for g in m.Groups -> g.Value ])
        else None

    let parsePoint (s: string) =
        let result = match s with
                      | Regex "position=<\s*(-?\d+),\s*(-?\d+)> velocity=<\s*(-?\d+),\s*(-?\d+)>" [x; y; velocityX; velocityY] ->
                          Some (x |> int, y |> int, velocityX |> int, velocityY |> int)
                      | _ -> None
        let x, y, velocityX, velocityY = result.Value
        let coordinate = Coordinate(x, y)
        let velocity = Velocity(velocityX, velocityY)
        Point(coordinate, velocity)

    let topLeft (coordinates: seq<Coordinate>) =
        let minX = coordinates |> Seq.minBy (fun c -> fst c)
        let minY = coordinates |> Seq.minBy (fun c -> snd c)
        Coordinate(fst minX, snd minY)

    let bottomRight (coordinates: seq<Coordinate>) =
        let maxX = coordinates |> Seq.maxBy (fun c -> fst c)
        let maxY = coordinates |> Seq.maxBy (fun c -> snd c)
        Coordinate(fst maxX, snd maxY)

    let printGrid (positions: Set<Coordinate>) (xs: seq<int>) (ys: seq<int>) =
        Seq.iter (fun y ->
            Seq.iter (fun x ->
                let mark = match positions.Contains((Coordinate(x, y))) with
                            | true -> "#"
                            | false -> "."
                printf "%s" mark
            ) xs

            printfn ""
        ) ys

    let step seconds (point: Point) =
        let newX = fst point.Coordinate + fst point.Velocity * seconds
        let newY = snd point.Coordinate + snd point.Velocity * seconds
        Point(Coordinate(newX, newY), point.Velocity)

    let solveA (input: string) =
        let points = input |> Util.splitByRow |> Seq.map parsePoint

        Seq.fold (fun acc i ->
            let pointCoordinates = acc |> Seq.map (fun (p: Point) -> p.Coordinate)
            let minY = pointCoordinates |> Seq.map (fun p -> snd p) |> Seq.min
            let maxY = pointCoordinates |> Seq.map (fun p -> snd p) |> Seq.max
            let verticalDiff = maxY - minY
            let stepScale = if verticalDiff > 10000 then 20 elif verticalDiff > 1000 then 3 else 1

            if i % 100 = 0 then
                printfn "Iter %d. minY: %d, maxY: %d, diff: %d" i minY maxY (maxY - minY)

            if verticalDiff <= 10 then
                let tl = topLeft pointCoordinates
                let br = bottomRight pointCoordinates

                let xs = { fst tl.. fst br }
                let ys = { snd tl.. snd br }
                printGrid (Set.ofSeq pointCoordinates) xs ys
            Seq.map (step stepScale) acc
        ) points { 1 .. 100000 }

    let solveB (input: string) =
        let points = input |> Util.splitByRow |> Seq.map parsePoint
        let mutable n = 0

        Seq.fold (fun acc i ->
            let pointCoordinates = acc |> Seq.map (fun (p: Point) -> p.Coordinate)
            let minY = pointCoordinates |> Seq.map (fun p -> snd p) |> Seq.min
            let maxY = pointCoordinates |> Seq.map (fun p -> snd p) |> Seq.max
            let diff = maxY - minY
            let stepScale = if diff > 10000 then 20 elif diff > 1000 then 3 else 1

            if i % 100 = 0 then
                printfn "Iter %d. minY: %d, maxY: %d, diff: %d" i minY maxY (maxY - minY)

            if diff <= 10 then
                let tl = topLeft pointCoordinates
                let br = bottomRight pointCoordinates

                let xs = { fst tl.. fst br }
                let ys = { snd tl.. snd br }
                printGrid (Set.ofSeq pointCoordinates) xs ys
                printfn "After %d seconds" n

            n <- n + stepScale
            Seq.map (step stepScale) acc
        ) points { 1 .. 100000 }
